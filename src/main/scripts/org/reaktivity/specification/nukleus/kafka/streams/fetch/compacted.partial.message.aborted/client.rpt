#
# Copyright 2016-2019 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property applicationConnect "nukleus://streams/kafka#0"

property offset 0
property messageOffset ${offset + 1}

connect await CONNECT_CLIENT
        ${applicationConnect}
    option nukleus:window 10
    option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .topicName("test")
                               .fetchOffset(offset)
                               .build()}

connected

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .topicName("test")
                              .fetchOffset(offset)
                              .build()}

read notify CLIENT_CONNECTED

read nukleus:data.ext ${kafka:matchDataEx()
                             .typeId(nukleus:id("kafka"))
                             .fetchOffset(messageOffset)
                             .messageKey("key1")
                             .build()}
read [0..10]

read notify CLIENT_RECEIVED_PARTIAL_MESSAGE

# Unfortunately we can't predict how much data we get before getting read abort
# read aborted
