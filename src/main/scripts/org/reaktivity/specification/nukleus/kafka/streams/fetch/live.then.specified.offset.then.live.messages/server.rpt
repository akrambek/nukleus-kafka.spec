#
# Copyright 2016-2019 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property newTimestamp ${kafka:timestamp()}

property applicationAccept "nukleus://streams/kafka#0"
property applicationAcceptWindow 8192

accept ${applicationAccept}
       option nukleus:window ${applicationAcceptWindow}
       option nukleus:transmission "half-duplex"

# Client 1 live
accepted

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .topicName("test")
                              .build()}

connected

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .topicName("test")
                               .build()}
write flush

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .timestamp(newTimestamp)
                              .fetchOffset(16)
                              .build()}
write "Hello, live1"
write flush

write aborted
read abort

# Client 2 explicit offset
accepted

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .topicName("test")
                              .fetchOffset(1)
                              .build()}

connected

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .topicName("test")
                               .fetchOffset(1)
                               .build()}
write flush

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .timestamp(newTimestamp)
                              .fetchOffset(2)
                              .build()}
write "Hello, world"
write flush

# Client 3 live
accepted

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .topicName("test")
                              .build()}

connected

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .topicName("test")
                               .build()}
write flush

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .timestamp(newTimestamp)
                              .fetchOffset(17)
                              .build()}
write "Hello, live2"
write flush

