#
# Copyright 2016-2020 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property applicationConnect "nukleus://streams/kafka#0"
property applicationConnectWindow 8192
property messageOffset 1

# First client attaches to t at explicit offset zero
connect await ROUTED_CLIENT
        ${applicationConnect}
    option nukleus:window ${applicationConnectWindow}
    option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .topicName("t")
                               .fetchOffset(0)
                               .build()}

connected

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .topicName("t")
                              .fetchOffset(0)
                              .build()}

read notify CLIENT_ONE_CONNECTED

write await UNSUBSCRIBE_CLIENT_ONE
read abort
write aborted

# Second client attaches to test1 at unspecified offset
connect await CONNECT_CLIENT_TWO
        ${applicationConnect}
    option nukleus:window ${applicationConnectWindow}
    option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .topicName("test1")
                               .build()}

connected

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .topicName("test1")
                              .build()}

read notify CLIENT_TWO_CONNECTED

# Third client attaches to test2 at unspecified offset
connect await CLIENT_TWO_CONNECTED
        ${applicationConnect}
    option nukleus:window ${applicationConnectWindow}
    option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .topicName("test2")
                               .build()}

connected

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .topicName("test2")
                              .build()}

read notify CLIENT_THREE_CONNECTED
