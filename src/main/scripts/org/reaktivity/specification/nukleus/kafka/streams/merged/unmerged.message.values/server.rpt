#
# Copyright 2016-2020 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property serverAddress "nukleus://streams/kafka#0"

property deltaMillis 0L
property newTimestamp ${kafka:timestamp() + deltaMillis}

accept ${serverAddress}
    option nukleus:window 8192
    option nukleus:transmission "half-duplex"

accepted

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .meta()
                                  .topic("test")
                                  .build()
                              .build()}

connected

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .meta()
                                   .topic("test")
                                   .build()
                               .build()}
write flush

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .meta()
                                  .partition(0, 1)
                                  .partition(1, 2)
                                  .build()
                              .build()}
write flush

write await SENT_MESSAGE_A2
write await SENT_MESSAGE_B2

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .meta()
                                  .partition(0, 1)
                                  .partition(1, 2)
                                  .partition(2, 3)
                                  .build()
                              .build()}
write flush

accepted

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .fetch()
                                  .topic("test")
                                  .partition(0, -2)
                                  .build()
                              .build()}

connected

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .fetch()
                                   .topic("test")
                                   .partition(0, 1)
                                   .build()
                               .build()}
write flush

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(0, 1)
                                  .build()
                              .build()}
write "Hello, world #A1"
write flush
write notify SENT_MESSAGE_A1

write await SENT_MESSAGE_B1
write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(0, 2)
                                  .build()
                              .build()}
write "Hello, world #A2"
write flush
write notify SENT_MESSAGE_A2

accepted

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .fetch()
                                  .topic("test")
                                  .partition(1, -2)
                                  .build()
                              .build()}

connected

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .fetch()
                                   .topic("test")
                                   .partition(1, 1)
                                   .build()
                               .build()}
write flush

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(1, 1)
                                  .build()
                              .build()}
write "Hello, world #B1"
write flush
write notify SENT_MESSAGE_B1

write await SENT_MESSAGE_A2
write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(1, 2)
                                  .build()
                              .build()}
write "Hello, world #B2"
write flush
write notify SENT_MESSAGE_B2

accepted

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .fetch()
                                  .topic("test")
                                  .partition(2, -2)
                                  .build()
                              .build()}

connected

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .fetch()
                                   .topic("test")
                                   .partition(2, 1)
                                   .build()
                               .build()}
write flush

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(2, 1)
                                  .build()
                              .build()}
write "Hello, world #C1"
write flush

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .fetch()
                                  .timestamp(newTimestamp)
                                  .partition(2, 2)
                                  .build()
                              .build()}
write "Hello, world #C2"
write flush
