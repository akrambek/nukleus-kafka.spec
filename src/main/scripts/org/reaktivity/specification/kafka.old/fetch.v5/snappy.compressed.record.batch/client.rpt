#
# Copyright 2016-2020 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property networkConnect "nukleus://streams/kafka#0"
property networkConnectWindow 8192

property newMetadataRequestId ${kafka:newRequestId()}
property newRequestId ${kafka:newRequestId()}
property maximumWaitTime 500
property maximumBytes 65535
property maximumBytesTest0 8192

# Metadata connection
connect await ROUTED_SERVER
        ${networkConnect}
  option nukleus:window ${networkConnectWindow}
  option nukleus:transmission "duplex"
  option nukleus:byteorder "network"

write nukleus:begin.ext ${tcp:beginEx()
                             .typeId(nukleus:id("tcp"))
                             .localAddress("0.0.0.0")
                             .localPort(0)
                             .remoteHost("broker1")
                             .remotePort(9093)
                             .build()}


connected

write 21        # Size int32
write 3s        # ApiKey int16 (Metadata)
write 5s        # ApiVersion int16
write ${newMetadataRequestId} # CorrelationId int32
write -1s       # ClientId string (null)
write 1         # [TopicName] array length
  write 4s "test"
write [0x00]    # allow_auto_topic_creation (boolean)

read 85         # Size int32
read ${newMetadataRequestId} # CorrelationId int32
read [0..4]     # throttle_time_ms int32
read 1          # brokers array length
  read 1        # broker id
  read 7s "broker1"
  read 9093     # port int32
  read -1s      # rack string (null)
read 9s "cluster 1"
read 1          # controller broker id
read 1          # topic array length
  read 0s       # error code
  read 4s "test"
  read [0x00]   # is_internal boolean
  read 1        # partition array length
    read 0s     # error code
    read 0      # partition
    read 1      # leader
    read 0      # replicas array (empty)
    read -1     # isr array (null)
    read 0      # offline replicas array (empty)
read notify METADATA_RECEIVED

write 62        # Size int32
write 32s       # ApiKey int16 (DescribeConfigs)
write 0s        # ApiVersion int16
write ${newMetadataRequestId} # CorrelationId int32
write -1s       # ClientId string (null)
write 1         # resources count
write [0x02]    # resource type (topic is 2, from org/apache/kafka/common/resource/ResourceType.java)
write 4s "test" # topic name
write 2         # config names count
write 14s "cleanup.policy"  # config name
write 19s "delete.retention.ms" # config name

read 88         # Size int32
read ${newMetadataRequestId} # CorrelationId int32
read [0..4]     # throttle_time_ms int32
read 1          # resources count
read 0s         # error code
read -1s        # error message
read [0x02]     # resource type (topic)
read 4s "test"  # topic name
read 2          # config entries count
read 14s "cleanup.policy"   # config name
read 6s "delete"            # config value
read [0x00]     # read_only boolean
read [0x01]     # is_default boolean
read [0x00]     # is_sensitive boolean
read 19s "delete.retention.ms"
read 8s "86400000"
read [0x00]     # read_only boolean
read [0x01]     # is_default boolean
read [0x00]     # is_sensitive boolean

# Fetch stream
connect await METADATA_RECEIVED
        ${networkConnect}
  option nukleus:window ${networkConnectWindow}
  option nukleus:transmission "duplex"
  option nukleus:byteorder "network"

write nukleus:begin.ext ${tcp:beginEx()
                             .typeId(nukleus:id("tcp"))
                             .localAddress("0.0.0.0")
                             .localPort(0)
                             .remoteHost("broker1")
                             .remotePort(9093)
                             .build()}


connected

write 65
write 1s
write 5s
write ${newRequestId}
write -1s
write -1
write ${maximumWaitTime}
write 1
write ${maximumBytes}
write [0x00]
write 1
write 4s "test"
write 1
write 0
write 0L
write -1L
write ${maximumBytesTest0}

read 340
read ${newRequestId}
read [0..4]
read 1
read 4s "test"
    1                                   # partition count
        0                               # partition id
        0s                              # error code
        1L                              # high watermark
        -1L                             # last stable offset
        0L                              # log start offset
        -1                              # aborted transaction count
        280                             # record set size
            #
            # first record batch
            #
            0L                          # first offset
            68                          # length
            0                           # leader epoch
            [0x02]                      # magic
            0x4e8723aa                  # crc
            0s                          # attributes
            0                           # last offset delta
            (long:timestamp)            # first timestamp
            ${timestamp}                # max timestamp
            -1L                         # producer id
            -1s                         # producer epoch
            -1                          # first sequence
            1                           # record count
                ${kafka:varint(18)}     # record length
                [0x00]                  # attributes
                ${kafka:varint(0)}      # timestamp delta
                ${kafka:varint(0)}      # offset delta
                ${kafka:varint(-1)}     # key len
                ${kafka:varint(12)}     # value len
                "Hello, world"          # value
                ${kafka:varint(0)}      # header count
            #
            # second record batch
            #
            1L                          # first offset
            108                         # length
            0                           # leader epoch
            [0x02]                      # magic
            0x4e8723aa                  # crc
            2s                          # attributes (gzip)
            0                           # last offset delta
            (long:timestamp)            # first timestamp
            ${timestamp}                # max timestamp
            -1L                         # producer id
            -1s                         # producer epoch
            -1                          # first sequence
            1                           # record count
                # snappy record (22 00 00 00 01 16 "Hello, snappy" 00)
                [0x82 0x53 0x4e 0x41 0x50 0x50 0x59 0x00 0x00 0x00]
                [0x00 0x01 0x00 0x00 0x00 0x01 0x00 0x00 0x00 0x27]
                [0x28 0x0c 0x1f 0x8b 0x08 0x00 0x09 0x01 0x74 0x53]
                [0x63 0x60 0x60 0x60 0x94 0xf2 0x48 0xcd 0xc9 0xc9]
                [0xd7 0x51 0x28 0xce 0x4b 0x2c 0x28 0xa8 0x64 0x00]
                [0x00 0x69 0x3c 0xe5 0x3d 0x14 0x00 0x00 0x00]
            #
            # third record batch
            #
            2L                          # first offset
            68                          # length
            0                           # leader epoch
            [0x02]                      # magic
            0x4e8723aa                  # crc
            0s                          # attributes
            0                           # last offset delta
            (long:timestamp)            # first timestamp
            ${timestamp}                # max timestamp
            -1L                         # producer id
            -1s                         # producer epoch
            -1                          # first sequence
            1                           # record count
                ${kafka:varint(18)}     # record length
                [0x00]                  # attributes
                ${kafka:varint(0)}      # timestamp delta
                ${kafka:varint(0)}      # offset delta
                ${kafka:varint(-1)}     # key len
                ${kafka:varint(12)}     # value len
                "Hello, again"          # value
                ${kafka:varint(0)}      # header count


# historical fetch connection
connect await METADATA_RECEIVED
        ${networkConnect}
  option nukleus:window ${networkConnectWindow} 
  option nukleus:transmission "duplex"
  option nukleus:byteorder "network"

write nukleus:begin.ext ${tcp:beginEx()
                             .typeId(nukleus:id("tcp"))
                             .localAddress("0.0.0.0")
                             .localPort(0)
                             .remoteHost("broker1")
                             .remotePort(9093)
                             .build()}


connected
