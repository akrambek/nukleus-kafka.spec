#
# Copyright 2016-2019 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property networkAccept "nukleus://streams/kafka#0"
property networkAcceptWindow 8192

property deltaMillis 0L
property newTimestamp ${kafka:timestamp() + deltaMillis}

accept ${networkAccept}
  option nukleus:window ${networkAcceptWindow}
  option nukleus:transmission "duplex"
  option nukleus:byteorder "network"

accepted

read nukleus:begin.ext ${tcp:beginEx()
                            .typeId(nukleus:id("tcp"))
                            .localAddress("0.0.0.0")
                            .localPort(0)
                            .remoteHost("broker1.example.com")
                            .remotePort(9092)
                            .build()}

connected

read 65
     1s
     5s
     (int:requestId)
     -1s
     -1
     [0..4]
     1
     [0..4]
     [0x00]
     1
     4s "test"
     1
     0
     1L
     -1L
     [0..4]

write 286
      ${requestId}
      0
      1
      4s "test"
      1                                 # partitions
      0                                 # partition 0
      0s                                # no error
      -1L                               # no high water mark
      -1L                               # no last stable offset
      -1L                               # no log start offset
      -1                                # no aborted transaction count
      228                               # record set size
      1L                                # first offset
      216                               # length
      0x00
      [0x02]
      0x4e8723aa
      0s
      3                                 # last offset delta
      ${newTimestamp}                   # first timestamp
      ${newTimestamp}                   # last timestamp
      -1L
      -1s
      -1
      5                                 # records
      ${kafka:varint(40)}
      [0x00]
      ${kafka:varint(0)}                # timestamp delta
      ${kafka:varint(0)}                # offset delta
      ${kafka:varint(4)}                # key
      "key1"
      ${kafka:varint(12)}               # value
      "Hello, world"
      ${kafka:varint(1)}                # headers
        ${kafka:varint(7)}                  # key
        "header2"
        ${kafka:varint(6)}                  # value
        "value2"
      ${kafka:varint(36)}
      [0x00]
      ${kafka:varint(0)}                # timestamp delta
      ${kafka:varint(1)}                # offset delta
      ${kafka:varint(-1)}               # key
      ${kafka:varint(12)}               # value
      "Hello, world"
      ${kafka:varint(1)}                # headers
        ${kafka:varint(7)}                  # key
        "header1"
        ${kafka:varint(6)}                  # value
        "value1"
      ${kafka:varint(40)}
      [0x00]
      ${kafka:varint(0)}                # timestamp delta
      ${kafka:varint(2)}                # offset delta
      ${kafka:varint(4)}                # key
      "key1"
      ${kafka:varint(12)}               # value
      "Hello, world"
      ${kafka:varint(1)}                # headers
        ${kafka:varint(7)}                  # key
        "header1"
        ${kafka:varint(6)}                  # value
        "value1"
      ${kafka:varint(51)}
      [0x00]
      ${kafka:varint(0)}                # timestamp delta
      ${kafka:varint(3)}                # offset delta
      ${kafka:varint(-1)}               # key
      ${kafka:varint(12)}               # value
      "Hello, world"
      ${kafka:varint(2)}                # headers
        ${kafka:varint(7)}                  # key
        "header1"
        ${kafka:varint(6)}                  # value
        "value1"
        ${kafka:varint(7)}                  # key
        "header2"
        ${kafka:varint(6)}                  # value
        "value2"
